@app.callback(
    Output('train-output', 'children'),
    Input('train-button', 'n_clicks'),
    State('feature-checklist', 'value'),
    State('target-dropdown', 'value')
)
def train_model(n_clicks, features, target):
    global processed_df, trained_model, selected_features

    if n_clicks == 0 or processed_df is None or not features or target is None:
        return 'Model training has not been initiated.'

    try:
        selected_features = features
        X = processed_df[selected_features]
        y = processed_df[target]

        numeric_features = X.select_dtypes(include=[np.number]).columns
        categorical_features = X.select_dtypes(exclude=[np.number]).columns

        numeric_transformer = Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='mean')),
            ('scaler', StandardScaler())
        ])
        categorical_transformer = Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='most_frequent')),
            ('onehot', OneHotEncoder(handle_unknown='ignore'))
        ])

        preprocessor = ColumnTransformer(
            transformers=[
                ('num', numeric_transformer, numeric_features),
                ('cat', categorical_transformer, categorical_features)
            ]
        )

        pipeline = Pipeline(steps=[
            ('preprocessor', preprocessor),
            ('model', LinearRegression())
        ])

        pipeline.fit(X, y)
        trained_model = pipeline

        y_pred = pipeline.predict(X)
        r2 = r2_score(y, y_pred)

        return f'Model trained successfully! RÂ² Score: {r2:.2f}'
    except Exception as e:
        return f'Error during model training: {e}'

@app.callback(
    Output('predict-output', 'children'),
    Input('predict-button', 'n_clicks'),
    State('predict-input', 'value')
)
def predict(n_clicks, input_values):
    global trained_model, selected_features

    if n_clicks == 0 or trained_model is None:
        return 'Prediction has not been initiated.'

    try:
        input_list = [float(x) for x in input_values.split(',')]
        if len(input_list) != len(selected_features):
            return 'Error: Incorrect number of input values. Please match the selected features.'

        input_df = pd.DataFrame([input_list], columns=selected_features)
        prediction = trained_model.predict(input_df)[0]

        return f'Predicted Value: {prediction:.2f}'

    except Exception as e:
        return f'Error during prediction: {e}'

if __name__ == '__main__':
    app.run_server(debug=True)
